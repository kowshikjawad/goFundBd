"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } }


var _chunkSV7F6ZFDcjs = require('../../chunk-SV7F6ZFD.cjs');

// src/adapters/fastify/index.ts
var getFastifyAdapter = (handler, fastifyAdapterOptions = {}) => {
  return async (...options) => {
    const handlerBag = await handler({
      parseBodyAsString(rawRequest) {
        const request = rawRequest;
        if (typeof request.body === "string")
          return request.body;
        return _chunkSV7F6ZFDcjs.getStringFromIncomingMessage.call(void 0, request.raw, { maxBodySize: handlerBag.adapterOptions.maxBodySize });
      }
    }, ...options);
    const plugin = async (instance) => {
      var _a;
      instance.removeAllContentTypeParsers();
      instance.addContentTypeParser(
        /.*/,
        { bodyLimit: handlerBag.adapterOptions.maxBodySize },
        (_, body, done) => {
          done(null, body);
        }
      );
      const prefix = _nullishCoalesce(((_a = fastifyAdapterOptions.setPrefix) == null ? void 0 : _a.call(fastifyAdapterOptions, ...options)), () => ( "/"));
      instance.all(prefix, async (request, reply) => {
        const url = _chunkSV7F6ZFDcjs.getUrlWithBase.call(void 0, request.url);
        const response = await handlerBag.handleRequest({
          rawRequest: request,
          body: request.body,
          headers: request.headers,
          method: request.method,
          url
        });
        reply.status(response.status);
        if (response.headers) {
          reply.headers(response.headers);
        }
        reply.send(response.body);
      });
    };
    return plugin;
  };
};


exports.getFastifyAdapter = getFastifyAdapter;
