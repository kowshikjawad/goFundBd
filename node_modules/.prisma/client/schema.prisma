enum CampaignStatus {
  Pending
  Active
  Completed
}

model Campaign {
  campaign_id   Int            @id @default(autoincrement())
  title         String
  description   String
  goal_amount   Float
  raised_amount Float
  status        CampaignStatus
  start_date    DateTime
  end_date      DateTime
  category_id   String
  owner_id      Int

  category     Category       @relation(fields: [category_id], references: [category_id])
  owner        User           @relation(fields: [owner_id], references: [user_id])
  Donation     Donation[]
  Comment      Comment[]
  Notification Notification[]
  Chat         Chat[]
}

model Category {
  category_id String     @id @unique
  name        String
  campaigns   Campaign[]
}

model Chat {
  chat_id     Int      @id @default(autoincrement())
  user_id     Int
  campaign_id Int
  content     String
  created_at  DateTime @default(now())

  user     User     @relation(fields: [user_id], references: [user_id])
  campaign Campaign @relation(fields: [campaign_id], references: [campaign_id])
}

model Comment {
  comment_id  Int      @id @default(autoincrement())
  user_id     Int
  campaign_id Int
  content     String
  created_at  DateTime @default(now())

  user     User     @relation(fields: [user_id], references: [user_id])
  campaign Campaign @relation(fields: [campaign_id], references: [campaign_id])
}

model Donation {
  donation_id   Int      @id @default(autoincrement())
  amount        Float
  donation_date DateTime @default(now())
  user_id       Int
  campaign_id   Int

  user     User      @relation(fields: [user_id], references: [user_id])
  campaign Campaign  @relation(fields: [campaign_id], references: [campaign_id])
  Payment  Payment[]
}

model Notification {
  notification_id Int      @id @default(autoincrement())
  user_id         Int
  campaign_id     Int
  message         String
  is_read         Boolean  @default(false)
  created_at      DateTime @default(now())

  user     User     @relation(fields: [user_id], references: [user_id])
  campaign Campaign @relation(fields: [campaign_id], references: [campaign_id])
}

enum PaymentStatus {
  Pending
  Completed
  Failed
}

enum PaymentMethod {
  Stripe
  PayPal
  Other
}

model Payment {
  payment_id         Int           @id @default(autoincrement())
  donation_id        Int
  payment_method     PaymentMethod
  payment_status     PaymentStatus
  transaction_date   DateTime      @default(now())
  transaction_amount Float

  donation Donation @relation(fields: [donation_id], references: [donation_id])
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// schema.prisma
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Donor
  CampaignOwner
  Admin
}

model User {
  user_id      Int            @id @default(autoincrement())
  display_name String
  email        String         @unique
  password     String
  role         Role
  created_at   DateTime       @default(now())
  Campaign     Campaign[]
  Donation     Donation[]
  Comment      Comment[]
  Notification Notification[]
  Chat         Chat[]
}
