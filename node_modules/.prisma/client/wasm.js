
Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  NotFoundError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime
} = require('@prisma/client/runtime/wasm.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.NotFoundError = NotFoundError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CampaignScalarFieldEnum = {
  campaign_id: 'campaign_id',
  title: 'title',
  description: 'description',
  goal_amount: 'goal_amount',
  raised_amount: 'raised_amount',
  status: 'status',
  start_date: 'start_date',
  end_date: 'end_date',
  category_id: 'category_id',
  owner_id: 'owner_id'
};

exports.Prisma.CategoryScalarFieldEnum = {
  category_id: 'category_id',
  name: 'name'
};

exports.Prisma.ChatScalarFieldEnum = {
  chat_id: 'chat_id',
  user_id: 'user_id',
  campaign_id: 'campaign_id',
  content: 'content',
  created_at: 'created_at'
};

exports.Prisma.CommentScalarFieldEnum = {
  comment_id: 'comment_id',
  user_id: 'user_id',
  campaign_id: 'campaign_id',
  content: 'content',
  created_at: 'created_at'
};

exports.Prisma.DonationScalarFieldEnum = {
  donation_id: 'donation_id',
  amount: 'amount',
  donation_date: 'donation_date',
  user_id: 'user_id',
  campaign_id: 'campaign_id'
};

exports.Prisma.NotificationScalarFieldEnum = {
  notification_id: 'notification_id',
  user_id: 'user_id',
  campaign_id: 'campaign_id',
  message: 'message',
  is_read: 'is_read',
  created_at: 'created_at'
};

exports.Prisma.PaymentScalarFieldEnum = {
  payment_id: 'payment_id',
  donation_id: 'donation_id',
  payment_method: 'payment_method',
  payment_status: 'payment_status',
  transaction_date: 'transaction_date',
  transaction_amount: 'transaction_amount'
};

exports.Prisma.UserScalarFieldEnum = {
  user_id: 'user_id',
  display_name: 'display_name',
  email: 'email',
  password: 'password',
  role: 'role',
  created_at: 'created_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.CampaignStatus = exports.$Enums.CampaignStatus = {
  Pending: 'Pending',
  Active: 'Active',
  Completed: 'Completed'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  Stripe: 'Stripe',
  PayPal: 'PayPal',
  Other: 'Other'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  Pending: 'Pending',
  Completed: 'Completed',
  Failed: 'Failed'
};

exports.Role = exports.$Enums.Role = {
  Donor: 'Donor',
  CampaignOwner: 'CampaignOwner',
  Admin: 'Admin'
};

exports.Prisma.ModelName = {
  Campaign: 'Campaign',
  Category: 'Category',
  Chat: 'Chat',
  Comment: 'Comment',
  Donation: 'Donation',
  Notification: 'Notification',
  Payment: 'Payment',
  User: 'User'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "E:\\Nibir-Projects\\Perceptron Projects\\goFundBd\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [
      "driverAdapters",
      "prismaSchemaFolder"
    ],
    "sourceFilePath": "E:\\Nibir-Projects\\Perceptron Projects\\goFundBd\\prisma\\schema\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma/schema",
  "clientVersion": "5.22.0",
  "engineVersion": "605197351a3c8bdd595af2d2a9bc3025bca48ea2",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "enum CampaignStatus {\n  Pending\n  Active\n  Completed\n}\n\nmodel Campaign {\n  campaign_id   Int            @id @default(autoincrement())\n  title         String\n  description   String\n  goal_amount   Float\n  raised_amount Float\n  status        CampaignStatus\n  start_date    DateTime\n  end_date      DateTime\n  category_id   String\n  owner_id      Int\n\n  category     Category       @relation(fields: [category_id], references: [category_id])\n  owner        User           @relation(fields: [owner_id], references: [user_id])\n  Donation     Donation[]\n  Comment      Comment[]\n  Notification Notification[]\n  Chat         Chat[]\n}\n\nmodel Category {\n  category_id String     @id @unique\n  name        String\n  campaigns   Campaign[]\n}\n\nmodel Chat {\n  chat_id     Int      @id @default(autoincrement())\n  user_id     Int\n  campaign_id Int\n  content     String\n  created_at  DateTime @default(now())\n\n  user     User     @relation(fields: [user_id], references: [user_id])\n  campaign Campaign @relation(fields: [campaign_id], references: [campaign_id])\n}\n\nmodel Comment {\n  comment_id  Int      @id @default(autoincrement())\n  user_id     Int\n  campaign_id Int\n  content     String\n  created_at  DateTime @default(now())\n\n  user     User     @relation(fields: [user_id], references: [user_id])\n  campaign Campaign @relation(fields: [campaign_id], references: [campaign_id])\n}\n\nmodel Donation {\n  donation_id   Int      @id @default(autoincrement())\n  amount        Float\n  donation_date DateTime @default(now())\n  user_id       Int\n  campaign_id   Int\n\n  user     User      @relation(fields: [user_id], references: [user_id])\n  campaign Campaign  @relation(fields: [campaign_id], references: [campaign_id])\n  Payment  Payment[]\n}\n\nmodel Notification {\n  notification_id Int      @id @default(autoincrement())\n  user_id         Int\n  campaign_id     Int\n  message         String\n  is_read         Boolean  @default(false)\n  created_at      DateTime @default(now())\n\n  user     User     @relation(fields: [user_id], references: [user_id])\n  campaign Campaign @relation(fields: [campaign_id], references: [campaign_id])\n}\n\nenum PaymentStatus {\n  Pending\n  Completed\n  Failed\n}\n\nenum PaymentMethod {\n  Stripe\n  PayPal\n  Other\n}\n\nmodel Payment {\n  payment_id         Int           @id @default(autoincrement())\n  donation_id        Int\n  payment_method     PaymentMethod\n  payment_status     PaymentStatus\n  transaction_date   DateTime      @default(now())\n  transaction_amount Float\n\n  donation Donation @relation(fields: [donation_id], references: [donation_id])\n}\n\n// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\n// schema.prisma\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"driverAdapters\", \"prismaSchemaFolder\"]\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nenum Role {\n  Donor\n  CampaignOwner\n  Admin\n}\n\nmodel User {\n  user_id      Int            @id @default(autoincrement())\n  display_name String\n  email        String         @unique\n  password     String\n  role         Role\n  created_at   DateTime       @default(now())\n  Campaign     Campaign[]\n  Donation     Donation[]\n  Comment      Comment[]\n  Notification Notification[]\n  Chat         Chat[]\n}\n",
  "inlineSchemaHash": "a2ddaf334ed7ec2c20dc42ae0a07713166a1f82f72bd5188ee30656917a0cc61",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Campaign\":{\"fields\":[{\"name\":\"campaign_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"goal_amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"raised_amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"CampaignStatus\"},{\"name\":\"start_date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"end_date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"category_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"owner_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"category\",\"kind\":\"object\",\"type\":\"Category\",\"relationName\":\"CampaignToCategory\"},{\"name\":\"owner\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CampaignToUser\"},{\"name\":\"Donation\",\"kind\":\"object\",\"type\":\"Donation\",\"relationName\":\"CampaignToDonation\"},{\"name\":\"Comment\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CampaignToComment\"},{\"name\":\"Notification\",\"kind\":\"object\",\"type\":\"Notification\",\"relationName\":\"CampaignToNotification\"},{\"name\":\"Chat\",\"kind\":\"object\",\"type\":\"Chat\",\"relationName\":\"CampaignToChat\"}],\"dbName\":null},\"Category\":{\"fields\":[{\"name\":\"category_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"campaigns\",\"kind\":\"object\",\"type\":\"Campaign\",\"relationName\":\"CampaignToCategory\"}],\"dbName\":null},\"Chat\":{\"fields\":[{\"name\":\"chat_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"campaign_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ChatToUser\"},{\"name\":\"campaign\",\"kind\":\"object\",\"type\":\"Campaign\",\"relationName\":\"CampaignToChat\"}],\"dbName\":null},\"Comment\":{\"fields\":[{\"name\":\"comment_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"campaign_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CommentToUser\"},{\"name\":\"campaign\",\"kind\":\"object\",\"type\":\"Campaign\",\"relationName\":\"CampaignToComment\"}],\"dbName\":null},\"Donation\":{\"fields\":[{\"name\":\"donation_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"donation_date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"campaign_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"DonationToUser\"},{\"name\":\"campaign\",\"kind\":\"object\",\"type\":\"Campaign\",\"relationName\":\"CampaignToDonation\"},{\"name\":\"Payment\",\"kind\":\"object\",\"type\":\"Payment\",\"relationName\":\"DonationToPayment\"}],\"dbName\":null},\"Notification\":{\"fields\":[{\"name\":\"notification_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"campaign_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"is_read\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"NotificationToUser\"},{\"name\":\"campaign\",\"kind\":\"object\",\"type\":\"Campaign\",\"relationName\":\"CampaignToNotification\"}],\"dbName\":null},\"Payment\":{\"fields\":[{\"name\":\"payment_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"donation_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"payment_method\",\"kind\":\"enum\",\"type\":\"PaymentMethod\"},{\"name\":\"payment_status\",\"kind\":\"enum\",\"type\":\"PaymentStatus\"},{\"name\":\"transaction_date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"transaction_amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"donation\",\"kind\":\"object\",\"type\":\"Donation\",\"relationName\":\"DonationToPayment\"}],\"dbName\":null},\"User\":{\"fields\":[{\"name\":\"user_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"display_name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"Campaign\",\"kind\":\"object\",\"type\":\"Campaign\",\"relationName\":\"CampaignToUser\"},{\"name\":\"Donation\",\"kind\":\"object\",\"type\":\"Donation\",\"relationName\":\"DonationToUser\"},{\"name\":\"Comment\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentToUser\"},{\"name\":\"Notification\",\"kind\":\"object\",\"type\":\"Notification\",\"relationName\":\"NotificationToUser\"},{\"name\":\"Chat\",\"kind\":\"object\",\"type\":\"Chat\",\"relationName\":\"ChatToUser\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine 
  }
}

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

